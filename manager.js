#!/usr/bin/env node
process.env.TZ = 'Europe/Moscow';
var socket = require('socket.io-client')('http://localhost:6481');
var path = require('path');
var CronJob = require('cron').CronJob;
const conf = require(path.join(__dirname, '/conf.json'));
const path_to = require(path.join(__dirname, '/common/path_to'));
var Client = require(path.join(__dirname, '/manager/clients/Client'))(conf);
var bot = require(path.join(__dirname, '/manager/telegram/telegrafBot'))(conf);
var gs = require(path.join(__dirname, '/manager/google-sheet/gs'))(conf);
var Helper = require(path.join(__dirname, '/manager/helper/Helper'))(gs);
const proxyArr = ['91.188.239.25:30001','2.59.179.184:30001','2.59.177.164:30001'];

bot.command("go_bot", (ctx) => {
    var args = ctx.state.command.args;
    if (args.length != 2) {
        return ctx.reply('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ /go_bot login password');
    }
    const [login, password] = args;
    var client = new Client({
        login: login, password: password, type: 'go', conf: {
            numOfReload: 5,
            delay: 10000,
            numOfTry: 10,
            quickCycle: true
        },
	proxy: proxyArr[Math.floor(Math.random() * proxyArr.length)]
    });
    bot.sendMsgToAdmin(`–ó–∞—à–µ–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–¥:
1. ${client.login}`);
    socket.emit('on bot', client, client.conf);
});

bot.action("seach_on", async ({ reply }) => {
    if (cycleSeach.turnON) {
        return reply("–ü–æ–∏—Å–∫–æ–≤—ã–π –±–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    }
    cycleSeach.turnON = true;
    bot.sendMsgToAdmin('üôâ –ü–æ–∏—Å–∫–æ–≤—ã–π –±–æ—Ç –≤–∫–ª—é—á–µ–Ω!');
    var { getClientList } = await gs;
    var arr = await getClientList('id');
    var clients = arr.map(client => new Client({ ...client, type: 'seach', conf: conf.confJob.seach }));
    cycleSeach.helper = new Helper({ numberOfClient: 1, clients: clients });
    await cycleSeach();
})

bot.action("seach_off", async () => {
    cycleSeach.turnON = false;
    bot.sendMsgToAdmin('üôà –ü–æ–∏—Å–∫–æ–≤—ã–π –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!');
})

bot.action("night_on", async ({ reply }) => {
    if (cycleNight.turnON) {
        return reply("–ù–æ—á–Ω–æ–π –±–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    }
    cycleNight.turnON = true;
    bot.sendMsgToAdmin('üôâ –ù–æ—á–Ω–æ–π –±–æ—Ç –≤–∫–ª—é—á–µ–Ω!');
    var numberOfClient = 3;
    var { getClientList } = await gs;
    var arr = await getClientList('id', undefined, undefined, true);
    arr = arr.slice(0, arr.length - arr.length % numberOfClient);
    var clients = arr.map(client => new Client({ ...client, type: 'night', conf: conf.confJob.night }));
    cycleNight.helper = new Helper({ numberOfClient: numberOfClient, clients: clients });
    cycleNight.job = new CronJob('10 47 * * * *', () => { cycleNight() }, null, true, 'America/Los_Angeles');
    cycleNight.job.start();
})

bot.action("night_off", async ({ reply }) => {
    if (!cycleNight.turnON) {
        return reply("–ù–æ—á–Ω–æ–π –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!");
    }
    cycleNight.turnON = false;
    cycleNight.job.stop();
    bot.sendMsgToAdmin('üôà –ù–æ—á–Ω–æ–π –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!');
})

async function cycleSeach() {
    var helper = cycleSeach.helper;
    await helper.clearCurrentClient();
    if (!cycleSeach.turnON) {
        return 0;
    }
    var clients = await helper.getClients();
    if (clients) {
        var msg = [];
        clients.forEach((client, i) => {
            msg.push(`${i + 1}. ${client.login}`);
            socket.emit('on bot', client, client.conf);
        });
        msg = msg.join('\n');
        bot.sendMsgToAdmin(`–ó–∞—à–µ–ª –ø–æ–¥:
${msg}`);
    } else {
        cycleSeach.turnON = false;
        bot.sendMsgToAdmin("–ó–∞–∫–æ–Ω—á–∏–ª—Å—è —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –±–æ—Ç–æ–≤. –î–ª—è –Ω–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞ –Ω–∞–∂–º–∏—Ç–µ /turn_on");
    }
}

async function cycleNight() {
    var helper = cycleNight.helper;
    await helper.clearCurrentClient();
    if (!cycleNight.turnON) {
        return 0;
    }
    var clients = await helper.getClients();
    if (clients) {
        var msg = [];
        clients.forEach((client, i) => {
            msg.push(`${i + 1}. ${client.login}`);
            socket.emit('on bot', client, client.conf);
        });
        msg = msg.join('\n');
        bot.sendMsgToAdmin(`–ó–∞—à–µ–ª –ø–æ–¥:
${msg}`);
    } else {
        cycleNight.turnON = false;
        cycleNight.job.stop();
        bot.sendMsgToAdmin("–ó–∞–∫–æ–Ω—á–∏–ª—Å—è —Å–ø–∏—Å–æ–∫ –Ω–æ—á–Ω—ã—Ö –±–æ—Ç–æ–≤. –î–ª—è –Ω–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞ –Ω–∞–∂–º–∏—Ç–µ /turn_on");
    }
}

async function singUp() {
    var numberOfClient = 3;
    var { getClientList } = await gs;
    var arr = await getClientList('–≤–∞–∂–Ω–æ—Å—Ç—å', false);
    arr = arr.slice(arr.length % numberOfClient);
    var clients = arr.map(client => new Client({ ...client, type: 'sing', conf: conf.confJob.sign }));
    var helper = new Helper({ numberOfClient: numberOfClient, clients: clients });
    clients = await helper.getClients();
    if (clients) {
        var msg = [];
        clients.forEach((client, i) => {
            msg.push(`${i + 1}. ${client.login}`);
            socket.emit('on bot', client, client.conf);
        });
        msg = msg.join('\n');
        bot.sendMsgToAdmin(`–ó–∞—à–µ–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–¥:
${msg}`);
    } else {
        bot.sendMsgToAdmin("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—É—Å—Ç.");
    }
}

socket.on('no time', async (client) => {
    // bot.sendPhotoToAdmin(path_to.time(client), `‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏. –ë–æ—Ç: ${client.login}`);
     bot.sendMsgToAdmin(`‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏. –ë–æ—Ç: ${client.login}`);
     switch (client.type) {
        case 'seach':
            await cycleSeach();
            break;
        default:
            break;
    }
});

socket.on('time', async (client, date) => {
    var msg = date.map(d => new Date(d.date).toLocaleDateString()).join('\n');
    bot.sendMsgToAdmin(`‚úÖ –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏. –î–∞—Ç—ã:
${msg}
--------------
–ë–æ—Ç: ${client.login}`);
   // bot.sendPhotoToAdmin(path_to.time(client), `‚úÖ –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏. –î–∞—Ç—ã: ${msg}`);
    switch (client.type) {
        case 'seach':
            await cycleSeach();
            break;
        default:
            break;
    }
});

socket.on('sing up', (client) => {
    bot.sendMsgToAdmin(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ë–æ—Ç: ${client.login}`);
});

socket.on('no sing up', (client) => {
    bot.sendMsgToAdmin(`‚ùóÔ∏è –ù–µ –ø–æ–¥–æ—à–ª–∏ –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏. –ë–æ—Ç: ${client.login}`);
});

socket.on('error auth', async (client) => {
    bot.sendMsgToAdmin(`‚ùå **–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏**
${client.error}
–ë–æ—Ç: ${client.login}`);
    if (++client.failToAuth < 2) {
        return socket.emit('on bot', client, client.conf);
    }
    switch (client.type) {
        case 'seach':
            await cycleSeach();
            break;
        default:
            break;
    }
});

socket.on('error fill', async (client) => {
    bot.sendPhotoToAdmin(path_to.fill(client), `‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã. –ë–æ—Ç: ${client.login}`);
    switch (client.type) {
        case 'seach':
            await cycleSeach();
            break;
        default:
            break;
    }
});

socket.on('error sing', (client) => {
    bot.sendPhotoToAdmin(path_to.time(client, '_err'), `‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏. –ë–æ—Ç: ${client.login}`);
});

bot.launch()